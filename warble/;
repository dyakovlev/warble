var config = {
	debug: true
};

// Everything object
var Warble = function(config){
	var clips = []; // array of sound clips, sorted by start time

	// set up libraries
	if (!this.setupAudioLibs()) return;

	// initialize subcomponents
	if (!this.initComponents()) return;

	// attach UI to component
	if (!this.initUI()) return;
};

// set up polyfills for audio input and output
Warble.prototype.setupAudioLibs = function(){
	// set up Web Audio API
	window.AudioContext = window.AudioContext || window.webkitAudioContext;
	if (window.AudioContext === undefined) return false;

	// set up getUserMedia API
	if(navigator.mediaDevices === undefined) navigator.mediaDevices = {};
	if(navigator.mediaDevices.getUserMedia === undefined)
		navigator.mediaDevices.getUserMedia = generateGUMPatch();
};

Warble.prototype.initComponents = function(){
	this.recorder = new Recorder(config);
};

Warble.prototype.initUI = function(){
	// record button/key

	// playback button/key
};

Warble.prototype.record = function(){
};

Warble.prototype.play = function(){
};

function generateGUMPatch(){
	return function(constraints, successCallback, errorCallback) {
		var getUserMedia = (navigator.getUserMedia ||
				navigator.webkitGetUserMedia ||
				navigator.mozGetUserMedia ||
				navigator.msGetUserMedia);

		// Some browsers just don't implement it - return a rejected promise with an error
		if(!getUserMedia) {
			return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
		}

		// Otherwise, wrap getUserMedia in a promise to mimic modern API
		return new Promise(function(successCallback, errorCallback) {
			getUserMedia.call(navigator, constraints, successCallback, errorCallback);
		});
	}
}


